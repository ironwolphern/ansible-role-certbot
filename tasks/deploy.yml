---
- name: "Install certificate with Certbot | Deploy | {{ _title_pfx }}"
  become: true
  tags: [never, deploy]
  block:
    - name: "Header | Config | {{ _title_pfx }}"
      ansible.builtin.debug:
        msg: "---------------------------------- DEPLOY CERTIFICATE ----------------------------------"

    - name: "Check if account is registered | Deploy | {{ _title_pfx }}"
      ansible.builtin.stat:
        path: "/etc/letsencrypt/.registered"
      register: _registered

    - name: "Register account | Deploy | {{ _title_pfx }}"
      when: not _registered.stat.exists
      block:
        - name: "Register account with email | Deploy | {{ _title_pfx }}"
          ansible.builtin.command:
            cmd: "certbot register -n -q"
          register: _register
          changed_when: _register.rc == 0
          failed_when: _register.rc != 0

        - name: "Create flag registered | Deploy | {{ _title_pfx }}"
          ansible.builtin.file:
            path: "/etc/letsencrypt/.registered"
            state: touch
            mode: "0644"
            owner: root
            group: root
          when: _register.rc == 0

    - name: "Create command-line with domains | Deploy | {{ _title_pfx }}"
      ansible.builtin.set_fact:
        _domains_cmd: "{{ certbot__domains | map('regex_replace', '^(.*)$', '-d \\1') | join(' ') }}"

    - name: "Create (CSR) with private key | Deploy | {{ _title_pfx }}"
      when: certbot__tls_csr and _registered.stat.exists
      block:
        - name: "Generate a private key for (CSR) | Deploy | {{ _title_pfx }}"
          community.crypto.openssl_privatekey:
            path: "{{ certbot__key_path }}/privkey.pem"
            type: "{{ certbot__key_type }}"
            curve: "{{ certbot__curve }}"
            size: "{{ certbot__key_size }}"
            state: present
            mode: "0640"
            owner: root
            group: root

        - name: "Generate a (CSR) with private key generated | Deploy | {{ _title_pfx }}"
          community.crypto.openssl_csr:
            path: "{{ certbot__cert_path }}/csr.pem"
            privatekey_path: "{{ certbot__key_path }}/privkey.pem"
            common_name: "{{ certbot__server_fqdn }}"
            organization_name: "{{ certbot__tls_selfsigned_csr_organization }}"
            country_name: "{{ certbot__tls_selfsigned_csr_country }}"
            state_or_province_name: "{{ certbot__tls_selfsigned_csr_state }}"
            locality_name: "{{ certbot__tls_selfsigned_csr_locality }}"
            organizational_unit_name: "{{ certbot__tls_selfsigned_csr_ou }}"
            subject_alt_name: "{{ certbot__tls_selfsigned_csr_sans }}"

    - name: "Deploy standalone certificate for domains with challenge (http-01) | Deploy | {{ _title_pfx }}"
      ansible.builtin.shell:
        cmd: |
          certbot certonly --standalone \
          --cert-path {{ certbot__cert_path }} \
          --key-path {{ certbot__key_path }} \
          --fullchain-path {{ certbot__fullchain_path }} \
          --chain-path {{ certbot__chain_path }} \
          -n -q {{ _domains_cmd }}
      register: _standalone
      when: certbot__dns_provider == "standalone" and _registered.stat.exists
      changed_when: _standalone.rc == 0
      failed_when: _standalone.rc != 0

    - name: "Deploy standalone certificate with (CSR) for domains with challenge (http-01) | Deploy | {{ _title_pfx }}"
      ansible.builtin.shell:
        cmd: |
          certbot certonly --standalone \
          --csr {{ certbot__cert_path }}/csr.pem \
          --cert-path {{ certbot__cert_path }} \
          --key-path {{ certbot__key_path }} \
          --fullchain-path {{ certbot__fullchain_path }} \
          --chain-path {{ certbot__chain_path }} \
          -n -q {{ _domains_cmd }}
      register: _standalone_csr
      when: certbot__dns_provider == "standalone" and certbot__tls_csr and _registered.stat.exists
      changed_when: _standalone_csr.rc == 0
      failed_when: _standalone_csr.rc != 0

    - name: "Deploy dns provider certificate for domains with challenge (dns-01) | Deploy | {{ _title_pfx }}"
      ansible.builtin.shell:
        cmd: |
          certbot certonly \
          --dns-{{ certbot__dns_provider }} \
          --dns-{{ certbot__dns_provider }}-credentials {{ certbot__dir_credentials }}/{{ certbot__dns_provider }}.ini \
          --dns-{{ certbot__dns_provider }}-propagation-seconds {{ certbot__dns_provider_propagation_seconds }} \
          --cert-path {{ certbot__cert_path }} \
          --key-path {{ certbot__key_path }} \
          --fullchain-path {{ certbot__fullchain_path }} \
          --chain-path {{ certbot__chain_path }} \
          -n -q {{ _domains_cmd }}
      register: _dns_provider
      when: certbot__dns_provider != "" and certbot__dns_provider != "standalone" and _registered.stat.exists
      changed_when: _dns_provider.rc == 0
      failed_when: _dns_provider.rc != 0

    - name: "Deploy dns provider certificate with (CSR) for domains with challenge (dns-01) | Deploy | {{ _title_pfx }}"
      ansible.builtin.shell:
        cmd: |
          certbot certonly \
          --dns-{{ certbot__dns_provider }} \
          --dns-{{ certbot__dns_provider }}-credentials {{ certbot__dir_credentials }}/{{ certbot__dns_provider }}.ini \
          --dns-{{ certbot__dns_provider }}-propagation-seconds {{ certbot__dns_provider_propagation_seconds }} \
          --csr {{ certbot__cert_path }}/csr.pem \
          --cert-path {{ certbot__cert_path }} \
          --key-path {{ certbot__key_path }} \
          --fullchain-path {{ certbot__fullchain_path }} \
          --chain-path {{ certbot__chain_path }} \
          -n -q {{ _domains_cmd }}
      register: _dns_provider_csr
      when: certbot__dns_provider != "" and certbot__dns_provider != "standalone" and _registered.stat.exists and certbot__tls_csr
      changed_when: _dns_provider_csr.rc == 0
      failed_when: _dns_provider_csr.rc != 0
